{"name":"MultiStack","tagline":"BigData on MultiCloud","body":"MultiStack\r\n==========\r\n\r\nThere is a growing requirement of running Hadoop on Cloud. In response to this, various solutions have come out in both public and private domains. Being early solutions, they provide basic features but have only touched the tip of the iceberg. We are yet to see the real benefits of taking Hadoop to cloud.\r\nIn this presentation we discuss our experiences in building an orchestrator called MultiStack for deploying, managing and monitoring Hadoop jobs across clouds. It exploits cloud to offer features like auto-scaling, aggregated monitoring, job specific optimizations, isolation and smarter job scheduling within and across clouds. \r\n\r\nTraditionally, Hadoop has never been a part of cloud and has been restricted to a single cluster. MultiStack allows enterprises to run jobs across multiple clouds/clusters seamlessly. It reduces job completion time and improves resource utilization using machine learning based job scheduling. MultiStack scheduler uses fine-grained monitoring data to scale Hadoop clusters automatically and can use spot instances to lower the cost. We plan to integrate Hive, Mahout and Giraph to drive data analytics on cloud.\r\n\r\n### Features\r\n* **Scaling** - Based on the deadline, infrastructure and cost requirements, the scheduler will smartly scale the resources allocated to a job. The user is also provided an option to manually scale up/down.\r\n* **Ability to run across multiple cloud providers** - If you have multiple jobs and access to multiple cloud providers, MultiStack provides you the ability to run different jobs on different clouds.\r\n* **Job scheduling for minimizing cost and completion time** - MultiStack uses machine learning to smartly allocate jobs across multiple cloud providers aiming to reduce your cost and task-completion time.\r\n* **Performance optimization with storage integration** - With storage administration privileges, MultiStack auto-replicates the resources that being utilized heavily, thus improving performance.\r\n* **Client Tools** - A web interface and a simple command line interface for interacting with MultiStack.\r\n\r\n### Use Cases\r\n* Running multiple jobs on a private cloud\r\n* Running multiple jobs on a public cloud\r\n* Running multiple jobs across private and public clouds\r\n\r\n![MultiStack-deployment](https://docs.google.com/drawings/pub?id=1a_3mXukjkgnuK-awaMA2WrHXL-R4XCRcKs98AHd6n3w&w=988&h=268)\r\n\r\n### Architecture\r\n\r\n![MultiStack Server Architecture](https://docs.google.com/drawings/pub?id=1HHlZGTWTP-v6nFdsarIyLV6l-p5aUchV8OQyFkcF3Gk&w=950&h=389)\r\n\r\n### [API] (https://github.com/siel-iiith/MultiStack/wiki/API)\r\n\r\n### RoadMap\r\n* Improving instance monitoring for better scheduling.\r\n* Integration of other frameworks - R, mahout, hive/pig, Spark etc.\r\n* AutoScaling based on workload characterization.\r\n\r\n### License \r\n\r\nThe use and distribution terms for this software are covered by the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0.html) which can be found in the file LICENSE at the root of this distribution. By using this software in any fashion, you are agreeing to be bound by the terms of this license. You must not remove this notice, or any other, from this software.\r\n\r\n### Contributors\r\n* [Dharmesh Kakadia] (https://github.com/dharmeshkakadia) (dharmesh.kakadia@research.iiit.ac.in)\r\n* [Shashank Sahni] (https://github.com/shredder12) (shashank.sahni@research.iiit.ac.in)\r\n* [Kumar Rishabh] (https://github.com/hellboy2k8)\r\n* [Vishrut Mehta] (https://github.com/VishrutMehta)","google":"UA-44810331-1","note":"Don't delete this file! It's used internally to help with page regeneration."}